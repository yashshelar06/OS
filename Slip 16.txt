#include <stdio.h>
#include <time.h>

void performTask() {
    // Replace this function with the set of instructions you want to measure
    for (int i = 0; i < 1000000; i++) {
        // Some computation
    }
}

int main() {
    clock_t start, end;
    double cpu_time_used;

    // Record the start time
    start = clock();

    // Call the function or execute the set of instructions
    performTask();

    // Record the end time
    end = clock();

    // Calculate the CPU time used
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    // Print the execution time
    printf("Execution Time: %f seconds\n", cpu_time_used);

    return 0;
}

Q2)
#include <stdio.h>
#include <stdbool.h>

#define MAX_PAGES 20

// Function to check if a page is present in the frame
bool isPagePresent(int frame[], int n, int page) {
    for (int i = 0; i < n; i++) {
        if (frame[i] == page) {
            return true;
        }
    }
    return false;
}

// Function to find the index of the page that will be used last
int findFuturePage(int pageReference[], int currentPage, int n, int index) {
    int futureIndex = index + 1;
    int furthestIndex = -1;

    for (int i = 0; i < n; i++) {
        if (futureIndex >= MAX_PAGES) {
            break;
        }

        if (pageReference[futureIndex] == currentPage) {
            return futureIndex;
        }

        if (furthestIndex == -1 || futureIndex > furthestIndex) {
            furthestIndex = futureIndex;
        }

        futureIndex++;
    }

    return furthestIndex;
}

// OPT Page Replacement Algorithm
void optPageReplacement(int pageReference[], int n, int capacity) {
    int frame[capacity];
    int pageFaults = 0;

    printf("Page Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pageReference[i]);
    }
    printf("\n");

    printf("Number of Memory Frames: %d\n", capacity);

    for (int i = 0; i < capacity; i++) {
        frame[i] = -1; // Initialize frames to -1 (indicating empty frame)
    }

    for (int i = 0; i < n; i++) {
        int currentPage = pageReference[i];

        // Check if the page is already in the frame
        if (!isPagePresent(frame, capacity, currentPage)) {
            // If not, find the future page that will be used last
            int futureIndex = findFuturePage(pageReference, currentPage, n, i);

            // If a page is found to be replaced
            if (futureIndex != -1) {
                int pageToReplace = frame[0];
                int replaceIndex = 0;

                // Find the page in the frame that will be used last
                for (int j = 0; j < capacity; j++) {
                    if (isPagePresent(pageReference, n, frame[j])) {
                        int futureUseIndex = findFuturePage(pageReference, frame[j], n, i);

                        if (futureUseIndex > futureIndex) {
                            pageToReplace = frame[j];
                            replaceIndex = j;
                            futureIndex = futureUseIndex;
                        }
                    }
                }

                // Replace the page
                frame[replaceIndex] = currentPage;
                pageFaults++;

                // Display the current page scheduling
                printf("Page %d: [", currentPage);
                for (int j = 0; j < capacity; j++) {
                    printf("%d ", frame[j]);
                }
                printf("] <- Page Fault\n");
            }
        }
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int pageReference[] = {12, 15, 12, 18, 6, 8, 11, 12, 19, 12, 6, 8, 12, 15, 19, 8};
    int n = sizeof(pageReference) / sizeof(pageReference[0]);
    int memoryFrames;

    printf("Enter the number of memory frames: ");
    scanf("%d", &memoryFrames);

    optPageReplacement(pageReference, n, memoryFrames);

    return 0;
}
