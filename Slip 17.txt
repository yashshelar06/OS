Q1)
#include<stdio.h>
#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int allocation[MAX_PROCESSES][MAX_RESOURCES];
int maxDemand[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

void calculateNeed(int processes, int resources) {
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            need[i][j] = maxDemand[i][j] - allocation[i][j];
        }
    }
}

int isSafe(int processes, int resources, int work[]) {
    int finish[processes];

    // Initialize finish array to false
    for (int i = 0; i < processes; i++) {
        finish[i] = 0;
    }

    int tempWork[resources];
    for (int i = 0; i < resources; i++) {
        tempWork[i] = work[i];
    }

    int count = 0;

    while (count < processes) {
        int found = 0;
        for (int i = 0; i < processes; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < resources; j++) {
                    if (need[i][j] > tempWork[j]) {
                        break;
                    }
                }

                if (j == resources) {
                    for (int k = 0; k < resources; k++) {
                        tempWork[k] += allocation[i][k];
                    }
                    finish[i] = 1;
                    found = 1;
                    count++;
                }
            }
        }

        if (found == 0) {
            break; // If no process found, break the loop to avoid deadlock
        }
    }

    return (count == processes); // Return true if all processes are finished
}

void calculateMinimumResources(int processes, int resources) {
    for (int i = 0; i < resources; i++) {
        available[i] = 0;
        for (int j = 0; j < processes; j++) {
            available[i] += allocation[j][i];
        }
    }

    int work[resources];
    for (int i = 0; i < resources; i++) {
        work[i] = available[i];
    }

    int found = 0;

    // Try to allocate resources incrementally until a safe state is found
    for (int i = 0; i < resources; i++) {
        if (isSafe(processes, resources, work)) {
            found = 1;
            break;
        }

        work[i]++;

        // Reset work array to available
        for (int j = 0; j < resources; j++) {
            work[j] = available[j];
        }
    }

    if (found) {
        printf("Minimum number of resources needed to avoid deadlock: ");
        for (int i = 0; i < resources; i++) {
            printf("%d ", work[i]);
        }
        printf("\n");
    } else {
        printf("Deadlock cannot be avoided.\n");
    }
}

int main() {
    int processes, resources;

    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    printf("Enter the resource allocation matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    printf("Enter the maximum demand matrix:\n");
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            scanf("%d", &maxDemand[i][j]);
        }
    }

    calculateNeed(processes, resources);
    calculateMinimumResources(processes, resources);

    return 0;
}

Q2)
#include <stdio.h>
#include <stdbool.h>

#define MAX_PAGES 20

// Function to check if a page is present in the frame
bool isPagePresent(int frame[], int n, int page) {
    for (int i = 0; i < n; i++) {
        if (frame[i] == page) {
            return true;
        }
    }
    return false;
}

// Function to find the index of the page that will be used last
int findFuturePage(int pageReference[], int currentPage, int n, int index) {
    int futureIndex = index + 1;
    int furthestIndex = -1;

    for (int i = 0; i < n; i++) {
        if (futureIndex >= MAX_PAGES) {
            break;
        }

        if (pageReference[futureIndex] == currentPage) {
            return futureIndex;
        }

        if (furthestIndex == -1 || futureIndex > furthestIndex) {
            furthestIndex = futureIndex;
        }

        futureIndex++;
    }

    return furthestIndex;
}

// OPT Page Replacement Algorithm
void optPageReplacement(int pageReference[], int n, int capacity) {
    int frame[capacity];
    int pageFaults = 0;

    printf("Page Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pageReference[i]);
    }
    printf("\n");

    printf("Number of Memory Frames: %d\n", capacity);

    for (int i = 0; i < capacity; i++) {
        frame[i] = -1; // Initialize frames to -1 (indicating empty frame)
    }

    for (int i = 0; i < n; i++) {
        int currentPage = pageReference[i];

        // Check if the page is already in the frame
        if (!isPagePresent(frame, capacity, currentPage)) {
            // If not, find the future page that will be used last
            int futureIndex = findFuturePage(pageReference, currentPage, n, i);

            // If a page is found to be replaced
            if (futureIndex != -1) {
                int pageToReplace = frame[0];
                int replaceIndex = 0;

                // Find the page in the frame that will be used last
                for (int j = 0; j < capacity; j++) {
                    if (isPagePresent(pageReference, n, frame[j])) {
                        int futureUseIndex = findFuturePage(pageReference, frame[j], n, i);

                        if (futureUseIndex > futureIndex) {
                            pageToReplace = frame[j];
                            replaceIndex = j;
                            futureIndex = futureUseIndex;
                        }
                    }
                }

                // Replace the page
                frame[replaceIndex] = currentPage;
                pageFaults++;

                // Display the current page scheduling
                printf("Page %d: [", currentPage);
                for (int j = 0; j < capacity; j++) {
                    printf("%d ", frame[j]);
                }
                printf("] <- Page Fault\n");
            }
        }
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int pageReference[] = {12, 15, 12, 18, 6, 8, 11, 12, 19, 12, 6, 8, 12, 15, 19, 8};
    int n = sizeof(pageReference) / sizeof(pageReference[0]);
    int memoryFrames;

    printf("Enter the number of memory frames: ");
    scanf("%d", &memoryFrames);

    optPageReplacement(pageReference, n, memoryFrames);
    return 0;
}

