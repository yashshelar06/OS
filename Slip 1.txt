Q1)
include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t child_pid;
    int nice_value = -10;  // A lower nice value means higher priority

    child_pid = fork();

    if (child_pid == 0) {
        // This code is executed by the child process
        printf("Child process (PID %d) is running with normal priority.\n", getpid());
    } else if (child_pid > 0) {
        // This code is executed by the parent process
        printf("Parent process (PID %d) is running with normal priority.\n", getpid());

        // Adjust the priority of the child process using nice()
        if (nice(nice_value) == -1) {
            perror("nice");
            exit(EXIT_FAILURE);
        }

        printf("Parent process has adjusted the child process's priority to be higher.\n");
    } else {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    // Add a sleep to keep the processes running for a while
    sleep(5);

    return 0;
}


Q2)
#include <stdio.h>

#define MAX_FRAMES 10

void fifoPageReplacement(int pages[], int n, int capacity) {
    int frame[capacity];
    int frameCount = 0;
    int pageFaults = 0;
    int frameIndex = 0;

    for (int i = 0; i < n; i++) {
        int currentPage = pages[i];
        int pageFound = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frameCount; j++) {
            if (frame[j] == currentPage) {
                pageFound = 1;
                break;
            }
        }

        // If the page is not in the frame, perform page fault
        if (!pageFound) {
            if (frameCount < capacity) {
                // If there is an empty frame, use it
                frame[frameCount++] = currentPage;
            } else {
                // Replace the oldest page in the frame using FIFO
                frame[frameIndex] = currentPage;
                frameIndex = (frameIndex + 1) % capacity;
            }
            pageFaults++;
        }

        // Display the current page scheduling
        printf("Page %d: [", currentPage);
        for (int j = 0; j < frameCount; j++) {
            printf("%d ", frame[j]);
        }
        printf("]");

        if (!pageFound) {
            printf(" <- Page Fault");
        }

        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int referenceString[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int n = sizeof(referenceString) / sizeof(referenceString[0]);
    int memoryFrames = 3;

    printf("Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", referenceString[i]);
    }
    printf("\n");

    printf("Number of Memory Frames: %d\n", memoryFrames);

    fifoPageReplacement(referenceString, n, memoryFrames);

    return 0;
}

