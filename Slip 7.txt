Q1)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid;

    // Create a child process
    pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // Child process
        printf("Child process (PID=%d) executing ls command...\n", getpid());

        // Replace the child process image with the ls command
        execl("/bin/ls", "ls", NULL);

        // If exec fails
        perror("execl");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        printf("Parent process (PID=%d) going to sleep...\n", getpid());

        // Parent sleeps for a while
        sleep(5);

        printf("Parent process waking up.\n");

        // Wait for the child to terminate
        wait(NULL);

        printf("Parent process completed.\n");
    }

    return 0;
}

Q2)
#include <stdio.h>
#include <stdlib.h>

#define MAX_JOBS 10

typedef struct {
    int jobID;
    int arrivalTime;
    int cpuBurst;
    int ioWaitTime;
    int turnaroundTime;
    int waitingTime;
} Job;

void calculateTurnaroundTime(Job jobs[], int n) {
    jobs[0].turnaroundTime = jobs[0].cpuBurst + jobs[0].ioWaitTime;

    for (int i = 1; i < n; i++) {
        jobs[i].turnaroundTime = jobs[i - 1].turnaroundTime + jobs[i].cpuBurst + jobs[i].ioWaitTime;
    }
}

void calculateWaitingTime(Job jobs[], int n) {
    jobs[0].waitingTime = 0;

    for (int i = 1; i < n; i++) {
        jobs[i].waitingTime = jobs[i - 1].turnaroundTime;
    }
}

void printGanttChart(Job jobs[], int n) {
    printf("Gantt Chart:\n");

    for (int i = 0; i < n; i++) {
        printf("| Job %d ", jobs[i].jobID);

        for (int j = 0; j < jobs[i].cpuBurst; j++) {
            printf("=");
        }

        printf(" |");
    }

    printf("\n");
}

int main() {
    int n;
    printf("Enter the number of jobs: ");
    scanf("%d", &n);

    if (n > MAX_JOBS) {
        printf("Maximum number of jobs allowed is %d\n", MAX_JOBS);
        return 1;
    }

    Job jobs[MAX_JOBS];

    printf("Enter arrival time and first CPU burst for each job:\n");
    for (int i = 0; i < n; i++) {
        jobs[i].jobID = i + 1;
        printf("Job %d:\n", jobs[i].jobID);
        printf("Arrival Time: ");
        scanf("%d", &jobs[i].arrivalTime);
        printf("CPU Burst: ");
        scanf("%d", &jobs[i].cpuBurst);
        jobs[i].ioWaitTime = 2; // Fixed I/O waiting time assumed
    }

    // Calculate turnaround time and waiting time
    calculateTurnaroundTime(jobs, n);
    calculateWaitingTime(jobs, n);

    // Print Gantt chart
    printGanttChart(jobs, n);

    // Print turnaround time and waiting time for each job
    printf("\nTurnaround Time and Waiting Time:\n");
    printf("| Job | Turnaround Time | Waiting Time |\n");
    for (int i = 0; i < n; i++) {
        printf("| %3d | %15d | %12d |\n", jobs[i].jobID, jobs[i].turnaroundTime, jobs[i].waitingTime);
    }

    // Calculate and print average turnaround time and waiting time
    int totalTurnaroundTime = 0, totalWaitingTime = 0;
    for (int i = 0; i < n; i++) {
        totalTurnaroundTime += jobs[i].turnaroundTime;
        totalWaitingTime += jobs[i].waitingTime;
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);
    printf("Average Waiting Time: %.2f\n", (float)totalWaitingTime / n);

    return 0;
}

