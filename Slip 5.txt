Q1)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <sys/resource.h>

int main() {
    pid_t pid;

    // Create a child process
    pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // Child process
        printf("Child process (PID=%d) created.\n", getpid());

        // Increase priority using nice()
        if (nice(10) == -1) {
            perror("nice");
            exit(EXIT_FAILURE);
        }

        // Get the child process priority using getpriority()
        int priority = getpriority(PRIO_PROCESS, 0);
        printf("Child process priority after nice(): %d\n", priority);

        // Simulate some work in the child process
        for (int i = 0; i < 100000000; ++i) {
            // Do some work
        }

        printf("Child process completed.\n");
    } else {
        // Parent process
        printf("Parent process (PID=%d) waiting for the child.\n", getpid());

        // Wait for the child to complete
        wait(NULL);

        printf("Parent process completed.\n");
    }

    return 0;
}

Q2)
#include <stdio.h>

#define MAX_PAGES 20

void fifoPageReplacement(int pages[], int n, int capacity) {
    int frame[capacity];
    int frameCount = 0;
    int pageFaults = 0;
    int frameIndex = 0;

    printf("Page Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    printf("Number of Memory Frames: %d\n", capacity);

    for (int i = 0; i < n; i++) {
        int currentPage = pages[i];
        int pageFound = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frameCount; j++) {
            if (frame[j] == currentPage) {
                pageFound = 1;
                break;
            }
        }

        // If the page is not in the frame, perform page fault
        if (!pageFound) {
            if (frameCount < capacity) {
                // If there is an empty frame, use it
                frame[frameCount++] = currentPage;
            } else {
                // Replace the oldest page in the frame using FIFO
                frame[frameIndex] = currentPage;
                frameIndex = (frameIndex + 1) % capacity;
            }
            pageFaults++;
        }

        // Display the current page scheduling
        printf("Page %d: [", currentPage);
        for (int j = 0; j < frameCount; j++) {
            printf("%d ", frame[j]);
        }
        printf("]");

        if (!pageFound) {
            printf(" <- Page Fault");
        }

        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int referenceString[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int n = sizeof(referenceString) / sizeof(referenceString[0]);
    int memoryFrames = 3;

    fifoPageReplacement(referenceString, n, memoryFrames);

    return 0;
}
