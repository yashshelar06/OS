Q1)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t child_pid;

    child_pid = fork();

    if (child_pid == 0) {
        // This code is executed by the child process
        printf("Child Process ID: %d\n", getpid());
        printf("Hello World\n");
    } else if (child_pid > 0) {
        // This code is executed by the parent process
        printf("Parent Process ID: %d\n", getpid());
        printf("Hi\n");
    } else {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    return 0;
}


Q2)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct Process {
    int id;
    int arrival_time;
    int first_burst;
    int remaining_burst;
    int turnaround_time;
    int waiting_time;
    int finished_time;
} Process;

void generate_burst(Process *p) {
    if (p->remaining_burst > 0) {
        p->remaining_burst = rand() % 10 + 1;
    }
}

int find_next_process(Process *processes, int num_processes, int current_time) {
    int min_time = 10000000;
    int min_index = -1;

    for (int i = 0; i < num_processes; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].finished_time == 0 && processes[i].remaining_burst < min_time) {
            min_time = processes[i].remaining_burst;
            min_index = i;
        }
    }

    return min_index;
}

void schedule(Process *processes, int num_processes) {
    int current_time = 0;
    int finished_processes = 0;

    while (finished_processes < num_processes) {
        int next_process_index = find_next_process(processes, num_processes, current_time);

        if (next_process_index != -1) {
            Process *next_process = &processes[next_process_index];
            int burst_time = next_process->remaining_burst;

            current_time += burst_time;
            next_process->remaining_burst = 0;
            next_process->finished_time = current_time;
            next_process->turnaround_time = next_process->finished_time - next_process->arrival_time;
            next_process->waiting_time = next_process->turnaround_time - next_process->first_burst;

            finished_processes++;
            generate_burst(next_process);
        } else {
            current_time++;
        }
    }
}

void print_processes(Process *processes, int num_processes) {
    int total_turnaround_time = 0;
    int total_waiting_time = 0;

    printf("Process\tTurnaround Time\tWaiting Time\n");

    for (int i = 0; i < num_processes; i++) {
        Process *p = &processes[i];

        printf("%d\t%d\t\t%d\n", p->id, p->turnaround_time, p->waiting_time);
        total_turnaround_time += p->turnaround_time;
        total_waiting_time += p->waiting_time;
    }

    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / num_processes);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / num_processes);
}

int main() {
    int num_processes;

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    Process processes[num_processes];

    for (int i = 0; i < num_processes; i++) {
        processes[i].id = i + 1;
        printf("Enter the arrival time of process %d: ", processes[i].id);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter the first CPU burst of process %d: ", processes[i].id);
        scanf("%d", &processes[i].first_burst);

        processes[i].remaining_burst = processes[i].first_burst;
        processes[i].finished_time = 0;
    }

    srand(time(NULL));
    schedule(processes, num_processes);
    print_processes(processes, num_processes);

    return 0;
}
