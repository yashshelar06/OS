Q1)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t childPid;

    // Create a child process
    childPid = fork();

    if (childPid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (childPid == 0) {
        // Child process
        printf("Child process (PID=%d) started with normal priority.\n", getpid());

        // Increase the priority of the child using nice()
        if (nice(-5) == -1) {
            perror("nice");
            exit(EXIT_FAILURE);
        }

        // Check the adjusted priority
        int childPriority = nice(0);
        printf("Child process (PID=%d) has adjusted priority: %d\n", getpid(), childPriority);
    } else {
        // Parent process
        printf("Parent process (PID=%d) waiting for the child to finish.\n", getpid());

        // Wait for the child to terminate
        wait(NULL);

        printf("Parent process completed.\n");
    }

    return 0;
}

Q2)
#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int processID;
    int arrivalTime;
    int cpuBurst;
    int ioWaitTime;
    int turnaroundTime;
    int waitingTime;
} Process;

// Function to swap two processes
void swap(Process *xp, Process *yp) {
    Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

// Function to perform selection sort based on arrival time
void sortByArrivalTime(Process processes[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

// Function to perform SJF scheduling
void sjfScheduling(Process processes[], int n) {
    int currentTime = 0;
    int totalTurnaroundTime = 0, totalWaitingTime = 0;

    // Sort processes based on arrival time
    sortByArrivalTime(processes, n);

    printf("Gantt Chart:\n");
    for (int i = 0; i < n; i++) {
        printf("| P%d (%d-%d) ", processes[i].processID, currentTime, currentTime + processes[i].cpuBurst);
        processes[i].waitingTime = currentTime - processes[i].arrivalTime;

        // Ensure waiting time is non-negative
        if (processes[i].waitingTime < 0) {
            processes[i].waitingTime = 0;
        }

        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].cpuBurst;
        totalTurnaroundTime += processes[i].turnaroundTime;
        totalWaitingTime += processes[i].waitingTime;

        currentTime += processes[i].cpuBurst + processes[i].ioWaitTime;
    }
    printf("|\n");

    // Print turnaround time and waiting time for each process
    printf("\nTurnaround Time and Waiting Time:\n");
    printf("| Process | Turnaround Time | Waiting Time |\n");
    for (int i = 0; i < n; i++) {
        printf("|   P%-4d |        %-9d |      %-8d |\n", processes[i].processID, processes[i].turnaroundTime, processes[i].waitingTime);
    }

    // Calculate and print average turnaround time and waiting time
    float averageTurnaroundTime = (float)totalTurnaroundTime / n;
    float averageWaitingTime = (float)totalWaitingTime / n;

    printf("\nAverage Turnaround Time: %.2f\n", averageTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", averageWaitingTime);
}

int main() {
    int numProcesses;

    // Accept the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &numProcesses);

    if (numProcesses > MAX_PROCESSES) {
        printf("Maximum number of processes allowed is %d\n", MAX_PROCESSES);
        return 1;
    }

    // Declare an array of processes
    Process processes[MAX_PROCESSES];

    // Accept arrival time and first CPU burst for each process
    for (int i = 0; i < numProcesses; i++) {
        processes[i].processID = i + 1;
        printf("Process P%d:\n", processes[i].processID);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("CPU Burst: ");
        scanf("%d", &processes[i].cpuBurst);
        processes[i].ioWaitTime = 2; // Fixed I/O waiting time assumed
        processes[i].turnaroundTime = 0;
        processes[i].waitingTime = 0;
    }

    // Perform SJF Scheduling
    sjfScheduling(processes, numProcesses);

    return 0;
}
